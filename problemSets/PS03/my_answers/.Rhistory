se_probs <- paternity_preds_with_se$se.fit
# Calculate the confidence intervals
ci_lower <- predicted_probs - (1.96 * se_probs)
ci_upper <- predicted_probs + (1.96 * se_probs)
# Incorporate these into your new_data dataframe for plotting
new_data$paternity_pred <- predicted_probs
new_data$ci_lower <- ci_lower
new_data$ci_upper <- ci_upper
# Predicted probabilities for 'defensefem'
defensefem_preds <- predict(defensefem_model_probit, newdata = new_data, type = "response", se.fit = TRUE)
defensefem_ci <- predict(defensefem_model_probit, newdata = new_data, type = "response", se.fit = TRUE, interval = "confidence")
# Assuming you've already generated predictions for defensefem
defensefem_preds_with_se <- predict(defensefem_model_probit, newdata = new_data, type = "response", se.fit = TRUE)
# Extract the predicted probabilities and their standard errors
df_predicted_probs <- defensefem_preds_with_se$fit
df_se_probs <- defensefem_preds_with_se$se.fit
# Calculate the confidence intervals
df_ci_lower <- df_predicted_probs - (1.96 * df_se_probs)
df_ci_upper <- df_predicted_probs + (1.96 * df_se_probs)
# Incorporate these into your new_data dataframe for plotting
new_data$defensefem_pred <- df_predicted_probs
new_data$df_ci_lower <- df_ci_lower
new_data$df_ci_upper <- df_ci_upper
## Plotting:
# Plot for Paternity
ggplot(new_data, aes(x = factor(eston), y = paternity_pred)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(title = "Predicted Probability of Supporting Paternity Leave",
x = "Interview Language (0 = Russian, 1 = Estonian)",
y = "Predicted Probability") +
theme_minimal()
# Plot for Defensefem
ggplot(new_data, aes(x = factor(eston), y = defensefem_pred)) +
geom_point() + # Use points for predictions
geom_errorbar(aes(ymin = df_ci_lower, ymax = df_ci_upper), width = 0.2) +
labs(title = "Predicted Probability of Supporting a Female Defense Minister",
x = "Interview Language (0 = Russian, 1 = Estonian)",
y = "Predicted Probability") +
theme_minimal()
# Plot for recruitfem
# Predicted probabilities for 'recruitfem'
recruitfem_preds <- predict(recruitfem_model_oprobit, newdata = new_data, type = "prob")
# Extracting the predicted probabilities for the specific outcome of interest ("fit 1")
specific_outcome_probs <- data.frame(
eston = c("Russian", "Estonian"),  # Assuming "0" corresponds to Russian, "1" to Estonian
Probability = c(
recruitfem_preds$fit[1, "1"],  # Predicted probability for specific outcome when eston = Russian
recruitfem_preds$fit[2, "1"]   # Predicted probability for specific outcome when eston = Estonian
)
)
# Plotting
# Apparently it's very complicated to obtain the CIs for ordered probit...
# Adjusting the factor levels for 'eston' so that "Russian" appears first
specific_outcome_probs$eston <- factor(specific_outcome_probs$eston, levels = c("Russian", "Estonian"))
# Replotting with geom_point and adjusted order
ggplot(specific_outcome_probs, aes(x = eston, y = Probability, color = eston)) +
geom_point(size = 4) +
scale_color_manual(values = c("Russian" = "skyblue", "Estonian" = "lightgreen"),
name = "Interview Language") +
labs(title = "Predicted Probability for Strong Engagement",
x = "Interview Language", y = "Predicted Probability") +
theme_minimal()
#### Study 2 ####
# Prepare the data
s2_clean <- s2 %>%
mutate(
age = old,
female = as.numeric(sex == 2),  # Assuming 2 indicates female
college = as.numeric(edlevel %in% c(4, 5)),
firstruss = as.numeric(firstl == 1),
prefruss = as.numeric(prefl == 2),
eston = as.numeric(interviewl == 1),
defensefem = as.numeric(defensemin == 1),
paternity = as.numeric(leave == 1),
# Adjusting variable name from 'recruitfem' to 'politicalrecruit'
recruitfem2 = factor(case_when(
politicalrecruit == 1 ~ 0,
politicalrecruit == 2 ~ 0,
politicalrecruit == 3 ~ 1,
politicalrecruit == 4 ~ 1,
TRUE ~ NA_real_
), levels = c(0, 1), ordered = TRUE),
femscale1 = (defensefem + paternity + recruitfem2),
femscale = femscale1 / 3,
suicide = justifiedsuicide,
ptyldrs = partyleaders,
ptyldrs80 = partyleadersnorm
) %>%
filter(!is.na(femscale))
# Probit models
paternity_model <- glm(paternity ~ eston, family = binomial(link = "probit"), data = s2_clean)
# Linear regression for placebo
suicide_model <- lm(suicide ~ eston, data = s2_clean)
# Ordered probit models for social norms experiment
ptyldrs_model <- polr(as.ordered(ptyldrs) ~ eston, data = s2_clean, Hess = TRUE)
ptyldrs80_model <- polr(as.ordered(ptyldrs80) ~ eston, data = s2_clean, Hess = TRUE)
s2 <- s2 %>%
mutate(
age = old,
female = as.numeric(sex == 2),  # Assuming 2 indicates female
college = as.numeric(edlevel %in% c(4, 5)),
firstruss = as.numeric(firstl == 1),
prefruss = as.numeric(prefl == 2),
eston = as.numeric(interviewl == 1),
defensefem = as.numeric(defensemin == 1),
paternity = as.numeric(leave == 1),
# Adjusting variable name from 'recruitfem' to 'politicalrecruit'
recruitfem2 = case_when(
politicalrecruit == 1 ~ 0,
politicalrecruit == 2 ~ 0,
politicalrecruit == 3 ~ 1,
politicalrecruit == 4 ~ 1,
TRUE ~ NA_real_
),
femscale1 = (defensefem + paternity + recruitfem2),
femscale = femscale1 / 3,
suicide = justifiedsuicide,
ptyldrs = partyleaders,
ptyldrs80 = partyleadersnorm
) %>%
filter(!is.na(femscale))
s2 <- read_dta("/Users/sarabcidf/Desktop/ASDS/Stats II/Replication/Files/Study2_data.dta")
s2_clean <- s2 %>%
mutate(
age = old,
female = as.numeric(sex == 2),  # Assuming 2 indicates female
college = as.numeric(edlevel %in% c(4, 5)),
firstruss = as.numeric(firstl == 1),
prefruss = as.numeric(prefl == 2),
eston = as.numeric(interviewl == 1),
defensefem = as.numeric(defensemin == 1),
paternity = as.numeric(leave == 1),
# Adjusting variable name from 'recruitfem' to 'politicalrecruit'
recruitfem2 = case_when(
politicalrecruit == 1 ~ 0,
politicalrecruit == 2 ~ 0,
politicalrecruit == 3 ~ 1,
politicalrecruit == 4 ~ 1,
TRUE ~ NA_real_
),
femscale1 = (defensefem + paternity + recruitfem2),
femscale = femscale1 / 3,
suicide = justifiedsuicide,
ptyldrs = partyleaders,
ptyldrs80 = partyleadersnorm
) %>%
filter(!is.na(femscale)) # Ensure we only include rows with non-NA values for femscale
# Probit models
paternity_model <- glm(paternity ~ eston, family = binomial(link = "probit"), data = study2_data)
s2_clean <- s2 %>%
mutate(
age = old,
female = as.numeric(sex == 2),  # Assuming 2 indicates female
college = as.numeric(edlevel %in% c(4, 5)),
firstruss = as.numeric(firstl == 1),
prefruss = as.numeric(prefl == 2),
eston = as.numeric(interviewl == 1),
defensefem = as.numeric(defensemin == 1),
paternity = as.numeric(leave == 1),
# Adjusting variable name from 'recruitfem' to 'politicalrecruit'
recruitfem2 = case_when(
politicalrecruit == 1 ~ 0,
politicalrecruit == 2 ~ 0,
politicalrecruit == 3 ~ 1,
politicalrecruit == 4 ~ 1,
TRUE ~ NA_real_
),
femscale1 = (defensefem + paternity + recruitfem2),
femscale = femscale1 / 3,
suicide = justifiedsuicide,
ptyldrs = partyleaders,
ptyldrs80 = partyleadersnorm
) %>%
filter(!is.na(femscale)) # Ensure we only include rows with non-NA values for femscale
# Probit models
paternity_model <- glm(paternity ~ eston, family = binomial(link = "probit"), data = s2_clean)
defensefem_model <- glm(defensefem ~ eston, family = binomial(link = "probit"), data = s2_clean)
# Ordered probit model for recruitfem (assuming it's already a factor with ordered levels)
recruitfem_model <- polr(as.ordered(recruitfem) ~ eston, data = s2_clean, Hess = TRUE)
# Ordered probit model for recruitfem (assuming it's already a factor with ordered levels)
recruitfem_model <- polr(as.ordered(recruitfem2) ~ eston, data = s2_clean, Hess = TRUE)
s2_clean <- s2 %>%
mutate(
age = old,
female = as.numeric(sex == 2),  # Assuming 2 indicates female
college = as.numeric(edlevel %in% c(4, 5)),
firstruss = as.numeric(firstl == 1),
prefruss = as.numeric(prefl == 2),
eston = as.numeric(interviewl == 1),
defensefem = as.numeric(defensemin == 1),
paternity = as.numeric(leave == 1),
# Adjusting variable name from 'recruitfem' to 'politicalrecruit'
recruitfem2 = case_when(
politicalrecruit == 1 ~ 0,
politicalrecruit == 2 ~ 3,
politicalrecruit == 3 ~ 3,
politicalrecruit == 4 ~ 4,
TRUE ~ NA_real_
),
femscale1 = (defensefem + paternity + recruitfem2),
femscale = femscale1 / 3,
suicide = justifiedsuicide,
ptyldrs = partyleaders,
ptyldrs80 = partyleadersnorm
) %>%
filter(!is.na(femscale)) # Ensure we only include rows with non-NA values for femscale
# Probit models
paternity_model <- glm(paternity ~ eston, family = binomial(link = "probit"), data = s2_clean)
defensefem_model <- glm(defensefem ~ eston, family = binomial(link = "probit"), data = s2_clean)
# Ordered probit model for recruitfem (assuming it's already a factor with ordered levels)
recruitfem_model <- polr(as.ordered(recruitfem2) ~ eston, data = s2_clean, Hess = TRUE)
summary(paternity_model)
summary(defensefem_model)
recruitfem_model <- polr(as.ordered(recruitfem2) ~ eston, data = s2_clean, Hess = TRUE)
summary(recruitfem_model)
summary(suicide_model)
suicide_model <- lm(suicide ~ eston, data = s2_clean)
summary(suicide_model)
# Ordered probit models for social norms experiment
ptyldrs_model <- polr(as.ordered(ptyldrs) ~ eston, data = s2_clean, Hess = TRUE)
summary(ptyldrs_model)
ptyldrs80_model <- polr(as.ordered(ptyldrs80) ~ eston, data = s2_clean, Hess = TRUE)
summary(ptyldrs80_model)
summary(s3)
s3 <- read.dta("Study3_data.dta")
# Recode control variables
s3$Sex <- ifelse(s3$X001 == 2, 1, 0)
s3$AgeCat <- cut(s3$X003, breaks = c(0, 19, 29, 39, 49, 59, 69, 79, 89, Inf), labels = seq(10, 90, by = 10))
s3$MaritalStatus <- ifelse(s3$X007 %in% c(2, 3, 4, 5, 6, 7), 0, NA)
s3$Unemployed <- ifelse(s3$X028 == 7, 1, 0)
s3$IncomeDecile <- ifelse(s3$X047 %in% c(-1, -2, -4, -5), NA, s3$X047)
# Assuming X025 represents education level (replace it with the correct variable)
s3$HighestEdu <- ifelse(s3$X025 %in% c(-1, -2, -3, -4, -5), NA, s3$X025)
# Generate dependent variables
s3$WomenJobs <- ifelse(s3$C001 %in% c(-1, -2, -4, -5), NA, ifelse(s3$C001 == 1, 0, 1))
s3$WomenPolLeaders <- ifelse(s3$D059 %in% c(-1, -2, -4, -5), NA, s3$D059)
s3$UnivGirl <- ifelse(s3$D060 %in% c(-1, -2, -4, -5), NA, s3$D060)
s3$WomenBusExec <- ifelse(s3$D078 %in% c(-1, -2, -4, -5), NA, s3$D078)
# Set country as the panel variable
s3_panel <- pdata.frame(s3, index = c("S003", "S002"))
# Load required libraries
library(foreign) # For reading Stata files
library(plm)     # For panel data analysis
lapply(c("stargazer",
"tidyverse",
"nnet",
"MASS",
"haven",
"ordinal",
"effects",
"foreign",
"plm",
"sandwich",
"outreg2"),  pkgTest)
# Recode control variables
s3$Sex <- ifelse(s3$X001 == 2, 1, 0)
s3$AgeCat <- cut(s3$X003, breaks = c(0, 19, 29, 39, 49, 59, 69, 79, 89, Inf), labels = seq(10, 90, by = 10))
s3$MaritalStatus <- ifelse(s3$X007 %in% c(2, 3, 4, 5, 6, 7), 0, NA)
s3$Unemployed <- ifelse(s3$X028 == 7, 1, 0)
s3$IncomeDecile <- ifelse(s3$X047 %in% c(-1, -2, -4, -5), NA, s3$X047)
# Assuming X025 represents education level (replace it with the correct variable)
s3$HighestEdu <- ifelse(s3$X025 %in% c(-1, -2, -3, -4, -5), NA, s3$X025)
# Generate dependent variables
s3$WomenJobs <- ifelse(s3$C001 %in% c(-1, -2, -4, -5), NA, ifelse(s3$C001 == 1, 0, 1))
s3$WomenPolLeaders <- ifelse(s3$D059 %in% c(-1, -2, -4, -5), NA, s3$D059)
s3$UnivGirl <- ifelse(s3$D060 %in% c(-1, -2, -4, -5), NA, s3$D060)
s3$WomenBusExec <- ifelse(s3$D078 %in% c(-1, -2, -4, -5), NA, s3$D078)
# Set country as the panel variable
s3_panel <- pdata.frame(s3, index = c("S003", "S002"))
# Analyses reported in Table 3, main text
# FE models, no controls
fe_model1 <- plm(WomenPolLeaders ~ gpii + factor(S002), data = s3_panel, model = "within")
s3 <- read_dta("/Users/sarabcidf/Desktop/ASDS/Stats II/Replication/Files/Study3_data.dta")
# Recode control variables
s3$Sex <- ifelse(s3$X001 == 2, 1, 0)
s3$AgeCat <- cut(s3$X003, breaks = c(0, 19, 29, 39, 49, 59, 69, 79, 89, Inf), labels = seq(10, 90, by = 10))
s3$MaritalStatus <- ifelse(s3$X007 %in% c(2, 3, 4, 5, 6, 7), 0, NA)
s3$Unemployed <- ifelse(s3$X028 == 7, 1, 0)
s3$IncomeDecile <- ifelse(s3$X047 %in% c(-1, -2, -4, -5), NA, s3$X047)
# Assuming X025 represents education level (replace it with the correct variable)
s3$HighestEdu <- ifelse(s3$X025 %in% c(-1, -2, -3, -4, -5), NA, s3$X025)
# Generate dependent variables
s3$WomenJobs <- ifelse(s3$C001 %in% c(-1, -2, -4, -5), NA, ifelse(s3$C001 == 1, 0, 1))
s3$WomenPolLeaders <- ifelse(s3$D059 %in% c(-1, -2, -4, -5), NA, s3$D059)
s3$UnivGirl <- ifelse(s3$D060 %in% c(-1, -2, -4, -5), NA, s3$D060)
s3$WomenBusExec <- ifelse(s3$D078 %in% c(-1, -2, -4, -5), NA, s3$D078)
# Set country as the panel variable
s3_panel <- pdata.frame(s3, index = c("S003", "S002"))
# Analyses reported in Table 3, main text
# FE models, no controls
fe_model1 <- plm(WomenPolLeaders ~ gpii + factor(S002), data = s3_panel, model = "within")
rownames(s3_panel) <- NULL
fe_model1 <- plm(WomenPolLeaders ~ gpii + factor(S002), data = s3_panel, model = "within")
rownames(s3_panel) <- NULL
fe_model1 <- plm(WomenPolLeaders ~ gpii + factor(S002), data = s3_panel, model = "within")
fe_model2 <- plm(UnivGirl ~ gpii + factor(S002), data = s3_panel, model = "within")
fe_model3 <- plm(WomenBusExec ~ gpii + factor(S002), data = s3_panel, model = "within")
fe_model4 <- plm(WomenJobs ~ gpii + factor(S002) + factor(S003), data = s3_panel, model = "within")
fe_model1_controls <- plm(WomenPolLeaders ~ gpii + factor(S002) + Sex + AgeCat + Unemployed + IncomeDecile + HighestEdu + MaritalStatus, data = s3_panel, model = "within")
fe_model2_controls <- plm(UnivGirl ~ gpii + factor(S002) + Sex + AgeCat + Unemployed + IncomeDecile + HighestEdu + MaritalStatus, data = s3_panel, model = "within")
fe_model3_controls <- plm(WomenBusExec ~ gpii + factor(S002) + Sex + AgeCat + Unemployed + IncomeDecile + HighestEdu + MaritalStatus, data = s3_panel, model = "within")
fe_model4_controls <- plm(WomenJobs ~ gpii + factor(S002) + factor(S003) + Sex + AgeCat + Unemployed + IncomeDecile + HighestEdu + MaritalStatus, data = s3_panel, model = "within")
# Generate output for Table 3
out1 <- outreg(fe_model1, se = "HC0", model = "fe", file = "Table3.txt", keep.vcov = TRUE, digits = 3, addtext = "Country FE, YES, Wave FE, YES")
library(outreg)
install.packages(outreg)
install.packages("outreg")
library(outreg2)
install.packages("outreg2")
library(outreg)
# Generate output for Table 3
out1 <- outreg(fe_model1, se = "HC0", model = "fe", file = "Table3.txt", keep.vcov = TRUE, digits = 3, addtext = "Country FE, YES, Wave FE, YES")
# Generate output for Table 3
out1 <- outreg(fe_model1, se = "HC0", model = "fe", file = "Table3.txt", keep.vcov = TRUE, digits = 3, addtext = "Country FE, YES, Wave FE, YES")
# Generating output for table 3
model_list <- list(
list(model = fe_model1, addtext = "Country FE, YES, Wave FE, YES"),
list(model = fe_model1_controls, addtext = "Education, YES, Income, YES, Country FE, YES, Wave FE, YES"),
list(model = fe_model2, addtext = "Country FE, YES, Wave FE, YES"),
list(model = fe_model2_controls, addtext = "Education, YES, Income, YES, Country FE, YES, Wave FE, YES"),
list(model = fe_model3, addtext = "Country FE, YES, Wave FE, YES"),
list(model = fe_model3_controls, addtext = "Education, YES, Income, YES, Country FE, YES, Wave FE, YES"),
list(model = fe_model4, addtext = "Country FE, YES, Wave FE, YES"),
list(model = fe_model4_controls, addtext = "Education, YES, Income, YES, Country FE, YES, Wave FE, YES")
)
# Create an empty character vector to store the model output
model_output <- c()
for (i in seq_along(model_list)) {
model <- model_list[[i]]$model
addtext <- model_list[[i]]$addtext
cat("\n\nModel", i, ":", addtext, "\n\n")
print(stargazer(model, type = "text", title = "Table 3", se = list(model$cov.unscaled), digits = 3, add.lines = addtext), quote = FALSE)
}
rm(list=ls())
library(httr)
library(jsonlite)
library(dplyr)
get_video_ids_from_playlist <- function(playlist_id, api_key) {
video_ids <- c()
page_token <- ""
repeat {
response <- GET(paste0("https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=", playlist_id, "&key=", api_key, "&pageToken=", page_token))
playlist_data <- content(response, "parsed")
if (!is.null(playlist_data$error)) {
cat("Error fetching playlist items:", playlist_data$error$message, "\n")
break
}
video_ids <- c(video_ids, sapply(playlist_data$items, function(item) item$snippet$resourceId$videoId))
page_token <- ifelse(is.null(playlist_data$nextPageToken), "", playlist_data$nextPageToken)
if (page_token == "") break
}
return(video_ids)
}
playlist_id <- "PLRnlRGar-_296KTsVL0R6MEbpwJzD8ppA"
api_key <- "AIzaSyBDbbHOpMaxXfQgX9FjqxnhSZKKsolarmY"
Initialize data frames for storing video details and comments
# Initialize data frames for storing video details and comments
video_details_df <- data.frame(VideoID = character(), Title = character(), UploadDate = character(), Views = numeric(), Likes = numeric(), stringsAsFactors = FALSE)
# Fetch video IDs from the playlist
video_ids <- get_video_ids_from_playlist(playlist_id, api_key)
# Loop through each video ID to fetch video details
for (i in seq_along(video_ids)) {
video_id <- video_ids[i]
cat("Processing video details", i, "of", length(video_ids), "- Video ID:", video_id, "\n")
response <- GET(paste0("https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=", video_id, "&key=", api_key))
metadata <- content(response, "parsed")
if (length(metadata$items) > 0) {
video_title <- metadata$items[[1]]$snippet$title
upload_date <- metadata$items[[1]]$snippet$publishedAt
views <- as.numeric(metadata$items[[1]]$statistics$viewCount)
likes <- as.numeric(metadata$items[[1]]$statistics$likeCount)
video_details_df <- rbind(video_details_df, data.frame(VideoID = video_id, Title = video_title, UploadDate = upload_date, Views = views, Likes = likes, stringsAsFactors = FALSE))
} else {
cat("No data found for video ID:", video_id, "\n")
}
Sys.sleep(1)  # Manage your request rate
}
View(video_details_df)
# Setting wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Saving
write.csv(video_details_df, "/Users/sarabcidf/Desktop/ASDS/Dissertation/AMLO/Youtube Scraping/VideoDetails.csv")
#### Removing objects, detaching and loading libraries, setting WD ####
# Removing objects
rm(list=ls())
# Detaching all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Loading libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("stargazer", "tidyverse", "nnet", "MASS"),  pkgTest)
# Setting wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Rounding
options(digits = 2)
#### Problem 1 ####
# Data
gdp <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
# Creating three-level categorical outcome:
gdp <- gdp %>%
mutate(GDPWdiff_cat = ifelse(GDPWdiff < 0, "Decrease",
ifelse(GDPWdiff == 0, "No_change",
"Increase")),
GDPWdiff_cat = factor(GDPWdiff_cat, levels = c("No_change", "Increase", "Decrease")))
count(gdp, GDPWdiff_cat)
# Unordered version:
unordered_logit <- multinom(GDPWdiff_cat ~ REG + OIL, data = gdp, ref = "No_change")
summary(unordered_logit)
# Turning to OR:
odds_ratios <- exp(coef(unordered_logit))
print(odds_ratios)
# Removing objects
rm(list=ls())
# Detaching all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Loading libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("stargazer", "tidyverse", "nnet", "MASS"),  pkgTest)
# Setting wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#### Problem 1 ####
# Data
gdp <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
# Creating three-level categorical outcome:
gdp <- gdp %>%
mutate(GDPWdiff_cat = ifelse(GDPWdiff < 0, "Decrease",
ifelse(GDPWdiff == 0, "No_change",
"Increase")),
GDPWdiff_cat = factor(GDPWdiff_cat, levels = c("No_change", "Increase", "Decrease")))
count(gdp, GDPWdiff_cat)
# Unordered version:
unordered_logit <- multinom(GDPWdiff_cat ~ REG + OIL, data = gdp, ref = "No_change")
summary(unordered_logit)
# Turning to OR:
odds_ratios <- exp(coef(unordered_logit))
print(odds_ratios)
#### Removing objects, detaching and loading libraries, setting WD ####
# Removing objects
rm(list=ls())
# Detaching all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Loading libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("stargazer", "tidyverse", "nnet", "MASS"),  pkgTest)
# Setting wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#### Problem 1 ####
# Data
gdp <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
# Creating three-level categorical outcome:
gdp <- gdp %>%
mutate(GDPWdiff_cat = ifelse(GDPWdiff < 0, "Decrease",
ifelse(GDPWdiff == 0, "No_change",
"Increase")),
GDPWdiff_cat = factor(GDPWdiff_cat, levels = c("No_change", "Increase", "Decrease")))
count(gdp, GDPWdiff_cat)
# Unordered version:
unordered_logit <- multinom(GDPWdiff_cat ~ REG + OIL, data = gdp, ref = "No_change")
summary(unordered_logit)
# Turning to OR:
odds_ratios <- exp(coef(unordered_logit))
print(odds_ratios)
# Data
gdp <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
# Creating three-level categorical outcome:
gdp <- gdp %>%
mutate(GDPWdiff_cat = ifelse(GDPWdiff < 0, "Decrease",
ifelse(GDPWdiff == 0, "No_change",
"Increase")),
GDPWdiff_cat = factor(GDPWdiff_cat, levels = c("No_change", "Increase", "Decrease")))
count(gdp, GDPWdiff_cat)
## Unordered version:
unordered_logit <- multinom(GDPWdiff_cat ~ REG + OIL, data = gdp, ref = "No_change")
summary(unordered_logit)
# Turning to OR:
odds_ratios <- exp(coef(unordered_logit))
print(odds_ratios)
# Reporting:
stargazer(unordered_logit, type = "latex")
